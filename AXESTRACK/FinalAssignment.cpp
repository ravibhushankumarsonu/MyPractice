////Assignment: You have been provided with hex array and you need to split the array depending upon a delimiter provided 0x0d 0x0a
////
////	The below hex array is a concatenation of many individual hex streams...
////
////	The whole hex array looks like
////	"90000d01035889905270194601894e590d0a90000a134406040002018b8f5e0d0a90001f12100c1b060a17ca033619bc086213e016554701946100c90032fc017c8b6e0d0a90001f12100c1b060a21ca03361cf8086211a012554901946100c90032fc017da1e60d0a90001f12100c1b060a2bc80336206408620f201a554701946100c90078d4017e07d80d0a90001f12100c1b060a35c9033623a408620cb015554801946100c90078d4017f73470d0a90001f12100c1b060b03c90336265c08620ad00e554901946100c90078d4018079a40d0a90001f12100c1b060b17c903362840086208900f552101946100c90078d40183de740d0a90001f12100c1b060b21c903362bbc086205201e553701946100c90078d4018411c50d0a90001f12100c1b060b2bc903362e3c086202700c554001946100c90078d40185fd5a0d0a90001f12100c1b060b35c903363050086200a00f554501946100c900a840018742d80d0a90001f12100c1b060c11c90336313c0861ff8000553101946100c900a840018ac61b0d0a90002516100c1b060c1ec90336313c0861ff800055310901946100c900a8404406040e02018c6edf0d0a"
////
////	The rule of parsing individual hex stream is like "90000d01035889905270194601894e590d0a"
////
////	The hex stream starts with 0x90 0x00, its hex and not ASCII characters which means like its 0x90 0x00 and not "9000" ASCII characters, after 0x900x00 the next byte represents the length of the individual hex stream other than the delimiter.e.g 90000d01035889905270194601894e590d0a, the stream starts with 0x90 0x00, and next byte is 0x0d which says length of the rest of the hex packet stream and in this hex stream its 13 in decimal which means starting from 0x0d, the total length is 13 bytes and after 13 bytes there is a delimiter 0x0d 0x0a
////
////	Hence you need to split the hex array depending upon the above rule, not like searching like 0x0d 0x0a in whole hex array.
////
////
////	So the split - ted array should look like this
////
////	90000d01035889905270194601894e590d0a
////	90000a134406040002018b8f5e0d0a
////	90001f12100c1b060a17ca033619bc086213e016554701946100c90032fc017c8b6e0d0a
////	90001f12100c1b060a21ca03361cf8086211a012554901946100c90032fc017da1e60d0a
////	90001f12100c1b060a2bc80336206408620f201a554701946100c90078d4017e07d80d0a
////	90001f12100c1b060a35c9033623a408620cb015554801946100c90078d4017f73470d0a
////	90001f12100c1b060b03c90336265c08620ad00e554901946100c90078d4018079a40d0a
////	90001f12100c1b060b17c903362840086208900f552101946100c90078d40183de740d0a
////	90001f12100c1b060b21c903362bbc086205201e553701946100c90078d4018411c50d0a
////	90001f12100c1b060b2bc903362e3c086202700c554001946100c90078d40185fd5a0d0a
////	90001f12100c1b060b35c903363050086200a00f554501946100c900a840018742d80d0a
////	90001f12100c1b060c11c90336313c0861ff8000553101946100c900a840018ac61b0d0a
////	90002516100c1b060c1ec90336313c0861ff800055310901946100c900a8404406040e02018c6edf0d0a
#include<iostream>
#include<vector>
#include<string>
#include<string.h>
#include<algorithm>

using namespace std;

int main()
{
	//Given string for process
	string str = "90000d01035889905270194601894e590d0a90000a134406040002018b8f5e0d0a90001f12100c1b060a17ca033619bc086213e016554701946100c90032fc017c8b6e0d0a90001f12100c1b060a21ca03361cf8086211a012554901946100c90032fc017da1e60d0a90001f12100c1b060a2bc80336206408620f201a554701946100c90078d4017e07d80d0a90001f12100c1b060a35c9033623a408620cb015554801946100c90078d4017f73470d0a90001f12100c1b060b03c90336265c08620ad00e554901946100c90078d4018079a40d0a90001f12100c1b060b17c903362840086208900f552101946100c90078d40183de740d0a90001f12100c1b060b21c903362bbc086205201e553701946100c90078d4018411c50d0a90001f12100c1b060b2bc903362e3c086202700c554001946100c90078d40185fd5a0d0a90001f12100c1b060b35c903363050086200a00f554501946100c900a840018742d80d0a90001f12100c1b060c11c90336313c0861ff8000553101946100c900a840018ac61b0d0a90002516100c1b060c1ec90336313c0861ff800055310901946100c900a8404406040e02018c6edf0d0a";
	//cout << str << endl;

	//Given result which is used for the checking our solution is true or not
	vector<string>arr{ "90000d01035889905270194601894e590d0a",
					  "90000a134406040002018b8f5e0d0a",
					  "90001f12100c1b060a17ca033619bc086213e016554701946100c90032fc017c8b6e0d0a",
					  "90001f12100c1b060a21ca03361cf8086211a012554901946100c90032fc017da1e60d0a",
					  "90001f12100c1b060a2bc80336206408620f201a554701946100c90078d4017e07d80d0a",
					  "90001f12100c1b060a35c9033623a408620cb015554801946100c90078d4017f73470d0a",
					  "90001f12100c1b060b03c90336265c08620ad00e554901946100c90078d4018079a40d0a",
					  "90001f12100c1b060b17c903362840086208900f552101946100c90078d40183de740d0a",
					  "90001f12100c1b060b21c903362bbc086205201e553701946100c90078d4018411c50d0a",
					  "90001f12100c1b060b2bc903362e3c086202700c554001946100c90078d40185fd5a0d0a",
					  "90001f12100c1b060b35c903363050086200a00f554501946100c900a840018742d80d0a",
					  "90001f12100c1b060c11c90336313c0861ff8000553101946100c900a840018ac61b0d0a",
					  "90002516100c1b060c1ec90336313c0861ff800055310901946100c900a8404406040e02018c6edf0d0a"};
	
	//String vector to store the result
	vector<string> result;

	//Delimiter for the string
	string delimiter = "9000";
	size_t pos=0;
	string result_element;

	//processing the result
	while ((pos = str.find(delimiter)) !=string::npos)
	{
		//cout << pos << endl;
		if (pos > 0)
		{
			result_element = str.substr(0, pos);
			//cout << delimiter+result_element << endl;
			result.push_back(delimiter + result_element);
		}
		str.erase(0, pos + delimiter.length());
		//cout << str.length() << endl;
	}
	//cout << delimiter+str<< endl;
	result.push_back(delimiter + str);


	cout << "Generated result as split hex array: " << endl;
	for (int i = 0; i < result.size(); i++)
		cout << result[i] << endl;

	cout << "\n\n Checking the result....." << endl;
	bool status = true;
	for (int i = 0; i < result.size(); i++)
	{
		if (arr[i] != result[i])
		{
			status = false;
		}
	}
	if (status == true)
	{
		cout << "Obtained result is True\n" << endl;
	}
	else
	{
		cout << "Obtained result is False\n" << endl;
	}
	return 0;
}